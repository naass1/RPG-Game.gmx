<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_life</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NO rotation

event_inherited();

spd = 3;
spdDash = 20;
image_speed = 0;
n = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// when the damage go

var xx = 0;
var yy = 0;
 // ضبط اتجاهات الضرب من جميع الاتجاهات
   switch(sprite_index){
    case spr_player_attack_down:
        xx = x;
        yy = y+12;
        break;
    
    case spr_player_attack_right:
        xx = x+10;
        yy = y+2;
        break;
    
    case spr_player_attack_left:
        xx = x-10;
        yy = y+2;
        break;
    
    case spr_player_attack_up:
        xx = x;
        yy = y-10;
        break;
   }

instance_create(xx,yy,obj_damage);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// timer dash

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move for Player

event_inherited();

var right = keyboard_check(vk_right);
var up = keyboard_check(vk_up);
var left = keyboard_check(vk_left);
var down = keyboard_check(vk_down);
var dash = keyboard_check_pressed(ord('C'));
var attack = keyboard_check_pressed(ord('X'));



//Move right
if(right){
    phy_position_x += spd;
    sprite_index = spr_player_right;
    image_speed = 0.2;
}

//Move up
if(up and !(right or left)){
    phy_position_y -= spd;
    sprite_index = spr_player_up;
    image_speed = 0.2;
}

//Move left
if(left){
    phy_position_x -= spd;
    sprite_index = spr_player_left;
    image_speed = 0.2;
}

//Move down
if(down){
    phy_position_y += spd;
    sprite_index = spr_player_down;
    image_speed = 0.2;
}

// when he stop
if(keyboard_check_released(vk_right) 
  or keyboard_check_released(vk_left)
  or keyboard_check_released(vk_up)
  or keyboard_check_released(vk_down)
  ){
    image_speed = 0;
    image_index = 0;
}

//Dash speed
if(dash){
  if(down){
    phy_position_y += spd+spdDash;
    instance_create(x,y+37,obj_player);
    image_alpha = 0.5
    alarm[0] = 2.8;
    }
  if(up and !(right or left)){
    phy_position_y -= spd+spdDash;
    instance_create(x,y-45,obj_player);
    image_alpha = 0.5
    alarm[0] = 2.8;
    } 
  if(right){
    phy_position_x += spd+spdDash;
    instance_create(x+38,y,obj_player);
    image_alpha = 0.5
    alarm[0] = 2.8;
    }
  if(left){
    phy_position_x -= spd+spdDash;
    instance_create(x-38,y,obj_player);
    image_alpha = 0.5
    alarm[0] = 2.8;
    }
}

// attack
if(attack){


    // sprites of attack and alarm of damage
   switch(sprite_index){
    case spr_player_down:
        sprite_index = spr_player_attack_down;
        image_speed = 0.5;
        alarm[1] = 6.5;
        break;
    
    case spr_player_right:
        sprite_index = spr_player_attack_right;
        image_speed = 0.5;
        alarm[1] = 6.5;
        break;
    
    case spr_player_left:
        sprite_index = spr_player_attack_left;
        image_speed = 0.5;
        alarm[1] = 6.5;
        break;
    
    case spr_player_up:
        sprite_index = spr_player_attack_up;
        image_speed = 0.5;
        alarm[1] = 6.5;
        break;
   } 
   
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End the attack animation


switch(sprite_index){
    case spr_player_attack_down:
        sprite_index = spr_player_down
        break;
    case spr_player_attack_up:
        sprite_index = spr_player_up
        break;
    case spr_player_attack_right:
        sprite_index = spr_player_right
        break;    
    case spr_player_attack_left:
        sprite_index = spr_player_left
        break;
}

image_index = 0;
image_speed = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shadow

draw_sprite(spr_player_shadow,image_index,x,y);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,12</point>
    <point>12,12</point>
    <point>12,20</point>
    <point>2,20</point>
  </PhysicsShapePoints>
</object>
